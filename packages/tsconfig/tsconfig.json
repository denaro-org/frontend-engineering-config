{
  "$schema": "https://json.schemastore.org/tsconfig",

  "compilerOptions": {
    // 启用允许 TypeScript 项目与项目引用一起使用的约束。
    "composite": true,
    // 从项目中的 TypeScript 和 JavaScript 文件生成 .d.ts 文件。
    "declaration": true,
    // 为 d.ts 文件创建 sourceMap。
    "declarationMap": false,
    // 指定生成什么模块代码。
    "module": "CommonJS",
    // 指定 TypeScript 如何从给定的模块说明符查找文件。
    "moduleResolution": "Node",
    // 设置文件的换行符。
    "newLine": "lf",
    // 如果报告任何类型检查错误，请禁用发出文件。
    "noEmitOnError": false,
    // 为具有隐含“any”类型的表达式和声明启用错误报告。
    "noImplicitAny": true,
    // 允许 JavaScript 文件成为程序的一部分。 使用“checkJS”选项从这些文件中获取错误。
    "allowJs": true,
    // 在经过类型检查的 JavaScript 文件中启用错误报告。
    "checkJs": true,
    // 启用导入 .json 文件。
    "resolveJsonModule": true,
    // 跳过所有 .d.ts 文件的类型检查。
    "skipLibCheck": true,
    // 开启 sourceMap
    "sourceMap": false,
    // 开启严格模式
    "strict": true,
    // 当类型检查时，考虑“null”和“undefined”。
    "strictNullChecks": true,
    // 发出额外的 JavaScript 以简化对导入 CommonJS 模块的支持。 这会启用“allowSyntheticDefaultImports”以实现类型兼容性。
    "esModuleInterop": true,
    // 设置发出的 JavaScript 的 JavaScript 语言版本并包含兼容的库声明。
    "target": "ESNext",
    // 指定生成什么 JSX 代码。
    "jsx": "preserve",
    // 指定要包含但不在源文件中引用的类型包名称。
    "types": ["@types/node"],
    "outDir": "lib"
  },

  "references": [{ "path": "./tsconfig.dom.json" }],

  "exclude": ["node_modules", "lib", "dist"]
}
